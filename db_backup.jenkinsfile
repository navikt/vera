node {
    def cluster="preprod-sbs"
    def backup_dir=env.JENKINS_HOME+"/vera_mongodb_backup"
    try {
        stage("Echo") {
            println(env.JENKINS_HOME)
            sh '''
                printenv | grep JENKINS"
                echo "--------------- sdf ------"
                echo $backup_dir
            '''
        }
        stage("Checkout")  {
            echo "Checkout"
            dir("nais-inventory") {
                git(credentialsId: 'nais-inventory', url: "git@github.com:navikt/nais-inventory.git")
            }
            
            dir("nsync") {
                git(url: "https://github.com/navikt/nsync.git")
            }
        }
        
        stage("fetch kubeconfig for ${cluster}") {
            sh("ansible-playbook -i ./nais-inventory/${cluster} -e @nais-inventory/${cluster}-vars.yaml ./nsync/fetch-kube-config.yaml")
        }
        
        stage("run mongodump on tpa-vera-mongodb") {
            sh '''
                export KUBECONFIG=./nsync/preprod-sbs/config
                vera_mongo=$(kubectl get pods -n tpa -l app=tpa-vera-mongodb --output=jsonpath={.items..metadata.name})
                kubectl exec -n tpa ${vera_mongo} -- mongodump -d deploy_log
                kubectl cp -n tpa ${vera_mongo}:/dump .
                backupfile="${backup_dir}/vera_mongodb_backup.$(date +%Y%m%d-%H%M%S).tgz"
                echo "Backupfile is set to ${backupfile}"
                tar -czvf ${backupfile} deploy_log/.
            '''
        }
        
        stage("Removing ${cluster} kubeconfig") {
            sh("rm -r ./nsync/${cluster}")
        }
        
    } catch (e) {
        if (currentBuild.result == null) {
          currentBuild.result = "FAILURE"
          currentBuild.description = "failed"
        }
    }
}