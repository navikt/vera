apiVersion: "nais.io/v1alpha1"
kind: "Application"
metadata:
  name: vera
  namespace: aura
  labels:
    team: aura
spec:
  image: {{ image }}
  port: 80
  accessPolicy:
    outbound:
      rules:
      - application: vera-mongo
  liveness:
    path: /selftest
  readiness:
    path: /selftest
  prometheus:
    path: /metrics
  replicas:
    min: 2
    max: 2
  ingresses:
  {{#each ingress }}
    - {{ this }}
  {{/each }}
  env:
    - name: VERADB_URL
      value: mongodb://vera-mongo-0.vera-mongo:27017,vera-mongo-1.vera-mongo:27017,vera-mongo-2.vera-mongo:27017/deploy_log?replicaSet=MainRepSet
    - name: VERADB_USERNAME
      value: "sera"
  skipCaBundle: true
  resources:
    limits:
      cpu: 500m 
      memory: 2Gi
    requests:
      cpu: 200m
      memory: 128Mi
---
apiVersion: v1
kind: Service
metadata:
  name: vera-mongo
  namespace: aura
  labels:
    name: vera-mongo
spec:
  ports:
    - port: 27017
      targetPort: 27017
  clusterIP: None
  selector:
    role: vera-mongo
---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: vera-mongo
  namespace: aura
spec:
  serviceName: vera-mongo
  replicas: 3
  selector:
    matchLabels:
      role: vera-mongo
  template:
    metadata:
      labels:
        role: vera-mongo
        environment: test
        replicaset: MainRepSet
        app: vera-mongo
    spec:
      terminationGracePeriodSeconds: 10
      containers:
        - name: mongod-container
          image: {{ mongoimage }}
          command:
            - "mongod"
            - "--bind_ip"
            - "0.0.0.0"
            - "--replSet"
            - "MainRepSet"
          resources:
            requests:
              cpu: 0.2
              memory: 1.25Gi
          ports:
            - containerPort: 27017
          volumeMounts:
            - name: mongodb-persistent-storage-claim
              mountPath: /data/db
  volumeClaimTemplates:
    - metadata:
        name: mongodb-persistent-storage-claim
        annotations:
          volume.beta.kubernetes.io/storage-class: "ssd-storage"
      spec:
        accessModes: [ "ReadWriteOnce" ]
        resources:
          requests:
            storage: 1Gi
---
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  labels:
    app: vera-mongo
    team: aura
  name: vera-mongo
  namespace: aura
spec:
  egress:
    - to:
        - namespaceSelector:
            matchLabels:
              linkerd.io/is-control-plane: "true"
        - namespaceSelector: {}
          podSelector:
            matchLabels:
              role: vera-mongo
        - namespaceSelector: {}
          podSelector:
            matchLabels:
              k8s-app: kube-dns
        - ipBlock:
            cidr: 0.0.0.0/0
            except:
              - 10.6.0.0/15
              - 172.16.0.0/12
              - 192.168.0.0/16
  ingress:
    - from:
        - namespaceSelector:
            matchLabels:
              name: nais
          podSelector:
            matchLabels:
              app: prometheus
    - from:
        - namespaceSelector:
            matchLabels:
              name: aura
          podSelector:
            matchLabels:
              app: vera
    - from:
        - namespaceSelector: {}
          podSelector:
            matchLabels:
              role: vera-mongo
    - from:
        - namespaceSelector:
            matchLabels:
              linkerd.io/is-control-plane: "true"
    - from:
        - namespaceSelector:
            matchLabels:
              linkerd.io/extension: viz
          podSelector:
            matchLabels:
              component: tap
    - from:
        - namespaceSelector:
            matchLabels:
              linkerd.io/extension: viz
          podSelector:
            matchLabels:
              component: prometheus
  podSelector:
    matchLabels:
      role: vera-mongo
  policyTypes:
    - Ingress
    - Egress
